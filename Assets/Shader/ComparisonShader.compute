// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWStructuredBuffer<float> ResultBuffer;

Texture2D<float4> PlayerColor;
Texture2D<float4> TargetColor;

Texture2D<float> PlayerHeight;
Texture2D<float> TargetHeight;

uint TextureResolution;
float DifficultyScale; // 1.0 = normal, >1.0 = hard

[numthreads(8, 8, 1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    if (id.x >= TextureResolution || id.y >= TextureResolution)
        return;

    int2 pixelCoord = int2(id.xy);

    float4 colorA = PlayerColor.Load(int3(pixelCoord, 0));
    float4 colorB = TargetColor.Load(int3(pixelCoord, 0));
    float colorDiff = length(colorA.rgb - colorB.rgb);

    float heightA = PlayerHeight.Load(int3(pixelCoord, 0)).r;
    float heightB = TargetHeight.Load(int3(pixelCoord, 0)).r;
    float heightDiff = abs(heightA - heightB);

    // Combine color + height differences
    float totalDiff = (colorDiff + heightDiff) * DifficultyScale;
    
    uint index = id.y * TextureResolution + id.x;
    ResultBuffer[index] = totalDiff;
}